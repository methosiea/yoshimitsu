{
	"extends": ["eslint:recommended"],
	"plugins": [],
	"rules": {
		"init-declarations": "error",
		"no-empty": [
			"error",
			{
				"allowEmptyCatch": true
			}
		],
		"padding-line-between-statements": [
			"error",
			// Always require blank lines after directive (like 'use-strict'), except between directives
			{ "blankLine": "always", "prev": "directive", "next": "*" },
			{ "blankLine": "any", "prev": "directive", "next": "directive" },
			// Always require blank lines after import, except between imports
			{ "blankLine": "always", "prev": "import", "next": "*" },
			{ "blankLine": "any", "prev": "import", "next": "import" },
			// Always require blank lines before and after every sequence of variable declarations and export
			// { "blankLine": "always", "prev": "*", "next": ["const", "let", "var", "export"] },
			// { "blankLine": "always", "prev": ["const", "let", "var", "export"], "next": "*" },
			// { "blankLine": "any", "prev": ["const", "let", "var", "export"], "next": ["const", "let", "var", "export"] },
			// Always require blank lines before and after class declaration, if, do/while, switch, try
			{ "blankLine": "always", "prev": "*", "next": ["if", "class", "for", "do", "while", "switch", "try"] },
			{ "blankLine": "always", "prev": ["if", "class", "for", "do", "while", "switch", "try"], "next": "*" },
			// Always require blank lines before return statements
			{ "blankLine": "always", "prev": "*", "next": "return" }
		]
	},
	"overrides": [
		{
			"env": { "browser": true, "commonjs": true },
			"files": ["**/*.ts"],
			"parserOptions": {
				"project": "tsconfig.json"
			},
			"extends": ["plugin:@typescript-eslint/recommended"],
			"rules": {
				"@typescript-eslint/consistent-type-assertions": ["error", { "assertionStyle": "never" }],
				"@typescript-eslint/no-floating-promises": ["error", { "ignoreIIFE": true }]
			}
		},
		{
			"env": { "node": true },
			"files": ["**/*.js", "**/*.cjs", "**/*.mjs"],
			"extends": ["plugin:node/recommended"],
			"rules": {
				"node/no-unpublished-require": "off"
			}
		},
		// We have to make sure that Prettier is the last extension that overrides Rules, so we add an extra
		// override here.
		{
			"files": ["**/*.js", "**/*.cjs", "**/*.mjs", "**/*.ts"],
			"extends": ["plugin:prettier/recommended"]
		}
	]
}
